// Copyright (c) Michael Heilmann 2018
#include "Nucleus/Interpreter/Arenas/GeneralArena-private.h.in"

Nucleus_Interpreter_NonNull() static void
premark
    (
        Nucleus_Interpreter_Context *context,
        Nucleus_Interpreter_GeneralArena *generalArena
    )
{
    Nucleus_Interpreter_GC *gc = &(NUCLEUS_INTERPRETER_PROCESSCONTEXT(context)->gc);
    for (Nucleus_Interpreter_GC_Tag *tag = generalArena->objects; NULL != tag; tag = tag->next)
    {
        if (Nucleus_Interpreter_GC_Tag_isLocked(tag) && Nucleus_Interpreter_GC_Tag_isWhite(tag))
        {
            tag->gray = gc->gray; gc->gray = tag;
            Nucleus_Interpreter_GC_Tag_setGray(tag);
        }
    }
}

Nucleus_Interpreter_NonNull() static void
finalize
	(
        Nucleus_Interpreter_Context *context,
		Nucleus_Interpreter_GC_Tag *tag
	)
{
	Nucleus_Interpreter_Type *type = Nucleus_Interpreter_GC_Tag_getType(context, tag);
	if (type)
	{
		if (Nucleus_Interpreter_isForeignType(type))
		{
			if (type->foreignType.finalizeForeignObject)
			{
				type->foreignType.finalizeForeignObject(context, tag2Address(tag));
			}
			Nucleus_Interpreter_ProcessContext_deallocateUnmanagedMemory(NUCLEUS_INTERPRETER_PROCESSCONTEXT(context), tag);
		}
		else if (Nucleus_Interpreter_isArrayType(type))
		{
			Nucleus_Interpreter_GC_ArrayTag *arrayTag = tag2ArrayTag(tag);
			Nucleus_Interpreter_ProcessContext_deallocateUnmanagedMemory(NUCLEUS_INTERPRETER_PROCESSCONTEXT(context), arrayTag);
		}
		else
		{
			fprintf(stderr, "%s:%d: neither foreign nor array value\n", __FILE__, __LINE__);
			exit(EXIT_FAILURE);
		}
	}
	else
	{
		fprintf(stderr, "%s:%d: value has not type\n", __FILE__, __LINE__);
		exit(EXIT_FAILURE);
	}
}

Nucleus_Interpreter_NonNull() static void
sweep
    (
        Nucleus_Interpreter_Context *context,
        Nucleus_Interpreter_GeneralArena *generalArena
    )
{
	Nucleus_Size live = 0, dead = 0;
	Nucleus_Interpreter_GC_Tag **previous = &generalArena->objects,
	                            *current = generalArena->objects;
    while (current)
    {
		if (Nucleus_Interpreter_GC_Tag_isBlack(current))
		{
			previous = &current->next;
			current = current->next;
			live++;			
		}
		else
		{
			*previous = current->next; // Predecessor points to successor.
			dead++;
			finalize(context, current);
			current = *previous;
		}
    }
}

Nucleus_Interpreter_NonNull() static void
uninitialize
    (
        Nucleus_Interpreter_Context *context,
        Nucleus_Interpreter_GeneralArena *generalArena
    )
{
    Nucleus_Interpreter_GC_Arena_sweep(context, NUCLEUS_INTERPRETER_GC_ARENA(generalArena));
}
